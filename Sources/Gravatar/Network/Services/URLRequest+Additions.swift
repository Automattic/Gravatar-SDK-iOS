import Foundation

extension URLRequest {
    /// Returns a `URLRequest`.  If an `apiKey` is found in the `Configuration`, a `Bearer` `Authorization` header will be set.
    /// - Returns: `URLRequest` with `Bearer` `Authorization` header set (if available)
    func settingAuthorization() async -> URLRequest {
        guard let apiKey = await Configuration.shared.apiKey else { return self }
        return settingAuthorization(bearerToken: apiKey)
    }

    /// Returns a `URLRequest` with a `Bearer` `Authorization` header set using a provided `apiKey`
    /// - Returns: `URLRequest` with `Bearer` `Authorization` header set
    func settingAuthorization(apiKey: String) -> URLRequest {
        let bearerToken = "Bearer \(apiKey)"
        return settingAuthorization(bearerToken: bearerToken)
    }

    /// Returns a `URLRequest` with a `Bearer` `Authorization` header set using a provided `bearerToken`
    /// - Returns: `URLRequest` with `Bearer` `Authorization` header set
    func settingAuthorization(bearerToken: String) -> URLRequest {
        var copy = self
        copy.setValue(bearerToken, forHTTPHeaderField: HeaderField.authorization)
        return copy
    }

    /// Returns a `URLRequest` with the `Accept-Language` header set using the provided `value`
    ///
    /// To specify the user's preferred languages, use `settingDefaultAcceptLanguage()`
    ///
    /// - Parameter value: The `Accept-Language` value.
    /// - Returns: `URLRequest` with the `Accept-Language` header set
    func settingAcceptLanguage(_ value: String) -> URLRequest {
        var copy = self
        copy.setValue(value, forHTTPHeaderField: HeaderField.acceptLanguage)
        return copy
    }

    /// Returns a `URLRequest` with a default `Accept-Language` header, generated by querying `Locale` for the user's
    /// `preferredLanguages`.
    ///
    /// See the [Accept-Language HTTP header documentation](https://tools.ietf.org/html/rfc7231#section-5.3.5).
    ///
    /// - Returns: `URLRequest` with the `Accept-Language` header set to the user's preferred languages
    func settingDefaultAcceptLanguage() -> URLRequest {
        settingAcceptLanguage(Locale.preferredLanguages.prefix(6).qualityEncoded())
    }

    /// Retruns a `URLRequest` with the `Client-Type` header set to the provided `value`
    ///
    /// To automatically set the `Client-Type`, use `settingDefaultClientType()`
    ///
    /// - Parameter value: The client type
    /// - Returns: `URLRequest` with the `Client-Type` header set
    func settingClientType(_ value: String) -> URLRequest {
        var copy = self
        copy.setValue(value, forHTTPHeaderField: HeaderField.clientType)
        return copy
    }

    /// Retruns a `URLRequest` with the `Client-Type` header set to the provided type safe `value`
    ///
    /// To automatically set the `Client-Type`, use `settingDefaultClientType()`
    ///
    /// - Parameter value: The client type
    /// - Returns: `URLRequest` with the `Client-Type` header set
    func settingClientType(_ type: ClientType) -> URLRequest {
        settingClientType(type.rawValue)
    }

    /// Retruns a `URLRequest` with the `Client-Type` header set according to the user's device`
    ///
    /// - Returns: `URLRequest` with the `Client-Type` header set
    func settingDefaultClientType() -> URLRequest {
        settingClientType(ClientType.iOS)
    }
}

extension URLRequest {
    enum HeaderField {
        static let authorization = "Authorization"
        static let acceptLanguage = "Accept-Language"
        static let clientType = "Client-Type"
    }

    enum ClientType: String {
        case iOS = "ios"
    }
}

extension Collection<String> {
    /// Returns a string that can be used as the value of an `Accept-Language` header.
    ///
    /// ## Example
    ///
    /// `[da, en-gb, en]` --> `"da, en-gb;q=0.9, en;q=0.8"`
    ///
    /// Which means:
    /// "I prefer Danish, but will accept British English and other types of English"
    ///
    /// See the [Accept-Language HTTP header documentation](https://tools.ietf.org/html/rfc7231#section-5.3.5).
    ///
    /// - Returns: a `String` representing the preferred languages, to be used as the `value` of the `Accept-Language` header
    func qualityEncoded() -> String {
        self.enumerated().map { index, encoding in
            let qValue = 1.0 - (Double(index) * 0.1) // Decrease the q-value for each encoding
            return index == 0 ? encoding : "\(encoding);q=\(qValue)"
        }.joined(separator: ", ")
    }
}
